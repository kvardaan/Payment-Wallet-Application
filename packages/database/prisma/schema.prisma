generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                         @id @default(autoincrement())
  externalId            String                      @unique
  email                 String                      @unique
  name                  String
  username              String                      @unique
  imageUrl              String
  OnRampTransaction     OnRampTransaction[]
  BankAccount           BankAccount[]
  Balance               Balance?
  sentTransfers         Transfer[]                  @relation(name: "FromUserRelation")
  receivedTransfers     Transfer[]                  @relation(name: "ToUserRelation")
  merchantPayment       MerchantPayment[]
}

// User's Bank Account(s)
model BankAccount {
  id                    Int                         @id @default(autoincrement())
  bankName              String
  accountNumber         Int                         @unique
  userId                Int                         
  user                  User                        @relation(fields: [userId], references: [id])
}

// User's On Ramp Transactions / Wallet Additions
model OnRampTransaction {
  id                    Int                         @id @default(autoincrement())
  userId                Int
  status                OnRampStatus                @default(Processing)
  token                 String                      @unique
  provider              String
  amount                Int
  startTime             DateTime
  user                  User                        @relation(fields: [userId], references: [id])
}

// User's Wallet Balance
model Balance {
  id                    Int                         @id @default(autoincrement())
  userId                Int                         @unique
  amount                Int                         @default(0)
  locked                Int                         @default(0)
  user                  User                        @relation(fields: [userId], references: [id])
}

// User's Transfers
model Transfer {
  id                    String                      @id @default(cuid())
  amount                Int
  timestamp             DateTime
  fromUserId            Int
  fromUser              User                        @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId              Int?
  toUser                User?                        @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  toMerchantId          Int?
  toMerchant            Merchant?                    @relation(fields: [toMerchantId], references: [id])
}

model Merchant {
  id                    Int                         @id @default(autoincrement())
  externalId            String                      @unique
  email                 String                      @unique
  name                  String
  username              String                      @unique
  imageUrl              String
  Balance               MerchantBalance?
  BankAccount           MerchantBankAccount?
  Payments              MerchantPayment[]
  receivedTransfers     Transfer[]
  Settlements           MerchantSettlement[]
}

// Merchant's Bank Account(s)
model MerchantBankAccount {
  id                    Int                         @id @default(autoincrement())
  bankName              String
  accountNumber         Int                         @unique
  balance               Int                         @default(0)
  merchantId            Int                         @unique
  merchant              Merchant                    @relation(fields: [merchantId], references: [id])
}

// Merchant's Wallet Balance
model MerchantBalance {
  id                    Int                         @id @default(autoincrement())
  merchantId            Int                         @unique
  amount                Int                         @default(0)
  merchant              Merchant                    @relation(fields: [merchantId], references: [id])
}

// Merchant's Payments (Receivables)
model MerchantPayment {
  id                    String                      @id @default(cuid())
  merchantId            Int                         
  merchant              Merchant                    @relation(fields: [merchantId], references: [id])
  amount                Int
  timestamp             DateTime
  userId                Int
  user                  User                        @relation(fields: [userId], references: [id])
  settlementId          String?
  settlement            MerchantSettlement?         @relation(fields: [settlementId], references: [id])
}

// Merchant's Settlements
model MerchantSettlement {
  id                    String                      @id @default(cuid())
  merchantId            Int
  merchant              Merchant                    @relation(fields: [merchantId], references: [id])
  amount                Int
  status                SettlementStatus            @default(Pending)
  payments              MerchantPayment[]
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

enum SettlementStatus {
  Pending
  Processing
  Completed
  Failed
}
